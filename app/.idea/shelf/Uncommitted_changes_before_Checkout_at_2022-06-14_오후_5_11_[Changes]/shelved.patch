Index: src/main/java/com/example/myapplication/CategoryPage.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication\r\n\r\nimport android.content.Intent\r\nimport android.graphics.Color\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.util.SparseBooleanArray\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.ContextCompat.startActivity\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.FragmentManager\r\nimport androidx.fragment.app.FragmentTransaction\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.database.*\r\n//import com.google.firebase.firestore.FirebaseFirestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport kotlinx.android.synthetic.main.activity_category.*\r\nimport kotlinx.android.synthetic.main.activity_category.view.*\r\nimport kotlinx.android.synthetic.main.activity_main_page.*\r\nimport kotlinx.android.synthetic.main.activity_register.*\r\nimport kotlinx.android.synthetic.main.brand_name.*\r\n\r\n\r\n\r\nclass CategoryPage : AppCompatActivity() {\r\n    private lateinit var adapter: BrandAdapter\r\n    lateinit var databaseReference: DatabaseReference\r\n    lateinit var userReference: DatabaseReference\r\n\r\n\r\n   // private lateinit var firestore: FirebaseFirestore\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_category)\r\n\r\n\r\n        var database = FirebaseDatabase.getInstance();\r\n        databaseReference = database.getReference()\r\n\r\n        var userid=\"id\" //유저아이디, 별점은 선택시 전송하는걸로\r\n        var grade=\"3.5\"\r\n\r\n        //##유저아이디###########\r\n        userid= FirebaseAuth.getInstance().currentUser?.uid.toString()\r\n        databaseReference.child(\"Users\").child(userid).child(\"userGrade\").get().addOnSuccessListener{\r\n            grade= it.value.toString()\r\n        }\r\n//        //######################\r\n\r\n\r\n\r\n        adapter = BrandAdapter(this)\r\n\r\n        val layoutManager=LinearLayoutManager(this,LinearLayoutManager.VERTICAL,false)\r\n        var  recycleView:RecyclerView= findViewById(R.id.recycleView)\r\n\r\n        recycleView.layoutManager = layoutManager\r\n\r\n        recycleView.adapter=adapter\r\n\r\n        var waitUserNum=0\r\n        databaseReference.addValueEventListener(object :ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                val test=snapshot.child(\"WaitUsers\")\r\n                waitUserNum= snapshot.child(\"WaitUsers\").child(\"waitUserNum\")\r\n                    .value.toString().toInt()\r\n\r\n                Log.e(\"qwer\",waitUserNum.toString())\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                TODO(\"Not yet implemented\")\r\n            }\r\n        })\r\n\r\n\r\n        //#############################카테고리불러오기###########//\r\n        userReference=database.getReference(\"resData\")\r\n\r\n        var i=0\r\n        var resCate=\"13\"  //임시\r\n        var sendCate=\"임시\"\r\n\r\n        var value=intent.getStringExtra(\"key1\") //\r\n        Log.e(\"snap\",value.toString())\r\n        when (value){\r\n            \"고기/구이\"->{resCate= \"0\"; sendCate=\"meat\"}\r\n            \"도시락\"->{resCate= \"1\";sendCate= \"rice\"}\r\n            \"돈까스/회/일식\"->{resCate= \"2\";sendCate= \"sushi\"}\r\n            \"백반/죽/국수\"->{resCate= \"3\";sendCate= \"lunch\"}\r\n            \"분식\"->{resCate= \"4\" ;sendCate= \"hotdog\"}\r\n            \"아시안\"->{resCate= \"5\";sendCate= \"asian\"}\r\n            \"양식\"->{resCate= \"6\";sendCate= \"western\"}\r\n            \"족발/보쌈\"->{resCate= \"7\" ; sendCate= \"pig\"}\r\n            \"중식\"->{resCate= \"8\";sendCate= \"chinese\"}\r\n            \"찜/탕/찌개\"->{resCate= \"9\";sendCate= \"zzim\"}\r\n            \"치킨\"->{resCate= \"10\";sendCate= \"chicken\"}\r\n            \"카페/디저트\"-> {resCate= \"11\"; sendCate= \"dessert\" }\r\n            \"패스트푸드\"->{resCate= \"12\";sendCate= \"burger\"}\r\n            \"피자\"->{ resCate = \"13\";sendCate= \"pizza\"}\r\n        }\r\n\r\n\r\n        Log.e(\"snap\",resCate.toString())\r\n\r\n        val rescateName=value.toString()\r\n\r\n        adapter.brandList.add(Brand(\"상관없음\",\"0\",\"0\",\"0\"))\r\n\r\n\r\n        Log.e(\"nowCate\",sendCate)\r\n\r\n        userReference.addValueEventListener(object :ValueEventListener {\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                for (ds in snapshot.children) {\r\n                    val test = snapshot.child(i.toString())\r\n                    for (es in test.children) {\r\n                        val data= Brand(\r\n                            test.child(\"name\").value.toString(),\r\n                            test.child(\"cate\").value.toString(),\r\n                            test.child(\"cate_num\").value.toString(),\r\n                            test.child(\"num\").value.toString()\r\n                        )\r\n                        if (es.key.toString()==\"cate_num\"){\r\n                            val tempkey:String=es.value.toString()\r\n                            if(tempkey==resCate){\r\n                                adapter.brandList.add(data)\r\n                            }\r\n                        }\r\n                    }\r\n                    i++\r\n                }\r\n\r\n                \r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                TODO(\"Not yet implemented\")\r\n            }\r\n        })\r\n\r\n        //#############################카테고리불러오기끝###########//\r\n\r\n\r\n\r\n        var arr=arrayOf<String>(\"0\",\"0\",\"0\")\r\n\r\n        //버튼\r\n        val btn_search=findViewById<Button>(R.id.btn_search) //매칭 시작 버튼 일단 메인페이지가게설정\r\n        btn_search.setOnClickListener({\r\n\r\n            databaseReference.child(\"WaitUsers\")\r\n                .child(waitUserNum.toString()).child(\"uid\").setValue(userid)\r\n\r\n            databaseReference.child(\"WaitUsers\")\r\n                .child(waitUserNum.toString()).child(\"grade\").setValue(grade)\r\n            waitUserNum++\r\n            databaseReference.child(\"WaitUsers\")\r\n                .child(\"waitUserNum\").setValue(waitUserNum)\r\n\r\n\r\n            Log.e(\"nowBrandList\",arr.toString())\r\n\r\n\r\n            val intent=Intent(this, MatchingSuccess::class.java)\r\n            intent.putExtra(\"grade\", grade.toString())\r\n            intent.putExtra(\"brandList\", arr[0].toString())\r\n            intent.putExtra(\"category\", sendCate.toString() )\r\n\r\n            startActivity(intent)\r\n        })\r\n\r\n        val btn_again=findViewById<Button>(R.id.btn_again) //다시하기버튼 메인페이지로\r\n        btn_again.setOnClickListener({\r\n            databaseReference.child(\"WaitUsers\")\r\n                .child(waitUserNum.toString()).removeValue() //유저데이터초기화\r\n            //waitUserNum--\r\n            val intent=Intent(this, MainPage::class.java)\r\n            startActivity(intent)\r\n\r\n        })\r\n\r\n\r\n        var text:String\r\n        var cate:String\r\n        var cate_num:String\r\n        var num:String\r\n\r\n        var count=0 //브랜드 최대 3개선택\r\n        var temp=0\r\n\r\n\r\n        adapter.listener = object: OnBrandClickListener {\r\n            override fun onItemClick(\r\n                holder: BrandAdapter.ViewHolder?,\r\n                view: View?,\r\n                position: Int,\r\n                checkStatus: SparseBooleanArray,\r\n                text_name: CharSequence,\r\n                text_cate: CharSequence,\r\n                text_num: CharSequence,\r\n                text_cate_num: CharSequence,\r\n                text5: CharSequence,\r\n                text_grade: CharSequence\r\n            ) {\r\n\r\n                //3개 선택\r\n                if(checkStatus.get(position,true)){\r\n                    if (count <3 &&view != null) {\r\n                        view.setBackgroundColor(Color.YELLOW)\r\n                        count++\r\n\r\n                        text= text_name.toString()\r\n                        cate= text_cate.toString()\r\n                        cate_num= text_cate_num.toString()\r\n                        num= text_num.toString()\r\n\r\n\r\n                        var i=0\r\n                        var temp=\"0\"\r\n                        while(i<3){\r\n                            if (arr[i]==\"0\") {\r\n                                temp = (i + 1).toString()\r\n                                arr[i]=cate_num\r\n                                break\r\n\r\n                            }\r\n                            i++\r\n                        }\r\n                        databaseReference.child(\"WaitUsers\")\r\n                            .child(waitUserNum.toString())\r\n                            .child(\"brandList\")\r\n\r\n                            .child(temp).setValue(cate_num)\r\n                        println(arr[0]+arr[1]+arr[2])\r\n                        println(arr)\r\n                        // 매칭을 위해 실시간데이터의 matchingUser데이터에 카테고리정보를 넣어줍니다\r\n                        checkStatus.put(position, false)\r\n                    }\r\n                }\r\n                else{ //클릭시 삭제하기. true 처음엔 true상태\r\n                    if (view != null) {\r\n                        view.setBackgroundColor(Color.WHITE)\r\n                        i=0\r\n                        while(i<3){\r\n                            if(arr[i]==text_num) {\r\n                                databaseReference\r\n                                    .child(\"WaitUsers\")\r\n                                    .child(waitUserNum.toString()).child(\"brandList\")\r\n                                    .child((i + 1).toString()).removeValue() //올라간데이터를삭제해줌\r\n                                arr[i]=\"0\"\r\n                                count--\r\n                                break\r\n                            }\r\n                            i++\r\n                        }\r\n                        checkStatus.put(position,true)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    fun showToast(message: String){\r\n        Toast.makeText(this,message,Toast.LENGTH_SHORT).show()\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/myapplication/CategoryPage.kt b/src/main/java/com/example/myapplication/CategoryPage.kt
--- a/src/main/java/com/example/myapplication/CategoryPage.kt	
+++ b/src/main/java/com/example/myapplication/CategoryPage.kt	
@@ -174,6 +174,7 @@
 
             val intent=Intent(this, MatchingSuccess::class.java)
             intent.putExtra("grade", grade.toString())
+            //아래 리스트 배열로 안보내져서 하나씩 보내기?
             intent.putExtra("brandList", arr[0].toString())
             intent.putExtra("category", sendCate.toString() )
 
